{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)df64f14a-44b4-4d11-a89a-b220a60c0bcb","ParentGuid":"(Guid)b9acd26b-a54b-4f34-9a4c-d40ed3794796","Name":"(string)DynamicIOConfig","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)d9b2b2cc-ea99-4c3b-aa42-1e5c49e65b84","@Value":"(Guid)63fe8b86-8bff-4ce1-83ec-fd8005f8fb4e"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)\nIF firstScan THEN\n\tcoCollection := DynKbusIoManager.coModules;\n\tFOR i := 1 TO coCollection.uiModuleCount DO\n\t\tIF (FIND(coCollection.aIModules[i].sOrderNumber,'16_IN') > 0) AND (cnt1 <= limitDigitalInputs - 1) THEN\n\t\t\tcnt1 := cnt1+1;\n\t\t\tGVL_WagoIO.digitalInputCollection[cnt1] := coCollection.aIModules[i];\n\t\tEND_IF\n\t\t\n\t\tIF (FIND(coCollection.aIModules[i].sOrderNumber,'16_OUT') > 0) AND (cnt2 <= limitDigitalOutputs - 1) THEN\n\t\t\tcnt2 := cnt2+1;\n\t\t\tGVL_WagoIO.digitalOutputCollection[cnt2] := coCollection.aIModules[i];\n\t\tEND_IF\n\t\t\n\t\tIF (FIND(coCollection.aIModules[i].sOrderNumber,'750-0455') > 0) AND (cnt3 <= limitAnalogInputs - 1) THEN\n\t\t\tcnt3 := cnt3+1;\n\t\t\tGVL_WagoIO.analogInputCollection[cnt3] := coCollection.aIModules[i];\n\t\tEND_IF\n\t\tIF (FIND(coCollection.aIModules[i].sOrderNumber,'2_IN') > 0) AND (cnt4 <= limitPowerSupplies - 1) THEN\n\t\t\tcnt4 := cnt4+1;\n\t\t\tGVL_WagoIO.powerSupplyCollection[cnt4] := coCollection.aIModules[i];\n\t\tEND_IF\n\tEND_FOR\n\t\n\t//Calculate how many channels are available\n\tGVL_IO.availableIO.availablePowerSupplies := UINT_TO_INT(cnt4);\n\tGVL_IO.availableIO.availableBilgeInputs := (16 * UINT_TO_INT(cnt1)) - 6; //Reserve four for dieseldet. and battery charger signals (fault and AC power)\n\tGVL_IO.availableIO.availableBilgeOutputs := (16 * UINT_TO_INT(cnt2)) - 4;//Reserve four for hardwired alarm signals\n\tIF GVL_IO.availableIO.availableBilgeOutputs < 1 OR GVL_IO.availableIO.availableBilgeInputs < 1 THEN\n\t\tGVL_IO.availableIO.IOFault := TRUE; //Give IO fault if minimum required IO is not met.\n\tEND_IF\n\t\n\tGVL_IO.availableIO.availableAnalogInputs := 4 * UINT_TO_INT(cnt3);\n\t\n\t//Set the different bilge objects available based on IO connected\n\tFOR j := 1 TO GVL_IO.limitBilgeInputs DO \n\t\tIF (j <= GVL_IO.availableIO.availableBilgeOutputs) AND (j <= GVL_IO.availableIO.availableBilgeInputs) THEN\n\t\t\tGVL_Retain.bilgePumpArray[j].available := TRUE;\n\t\tELSE\n\t\t\tGVL_Retain.bilgePumpArray[j].available := FALSE;\n\t\tEND_IF\n\tEND_FOR\t\n\t\n\t\n\t//Set the different tank objects available based on IO connected\n\tFOR j := 1 TO GVL_IO.limitAnalogInputs DO\n\t\tIF j <=  GVL_IO.availableIO.availableAnalogInputs THEN\n\t\t\tGVL_Retain.tankLevelArray[j].available := TRUE;\n\t\tELSE\n\t\t\tGVL_Retain.tankLevelArray[j].available := FALSE;\n\t\tEND_IF\n\tEND_FOR\n\t\n\t//Check if both power supplies for bilge and tanklevel are available.\n\tFOR j := 1 TO GVL_IO.availableIO.availablePowerSupplies DO\n\t\tIF j=1 THEN\n\t\t\tGVL_Retain.powerSupplyBilgeSystem.available := TRUE;\n\t\tELSIF j=2 THEN\n\t\t\tGVL_Retain.powerSupplyTankLevelSystem.available := TRUE;\n\t\tEND_IF\n\tEND_FOR\n\n\tfirstScan := FALSE; //Only do this config during startup.\nEND_IF","LineInfoPersistence":"(string)df64f14a-44b4-4d11-a89a-b220a60c0bcb_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)PROGRAM DynamicIOConfig\nVAR\n\tcoCollection \t: WagoSysDynamicIoMapping.I_Modules;\n\tbInput \t: BYTE;\n\toStatus : WagoSysErrorBase.FbResult;\n\t//counter for looping through IO-modules and adding them in separate arrays\n\ti\t: UINT;\n\tj\t: INT;\n\tcnt1\t: UINT\t:= 0;\n\tcnt2\t: UINT\t:= 0;\n\tcnt3\t: UINT\t:= 0;\n\tcnt4\t: UINT \t:= 0;\n\n\t//DEBUG\n\ttestString\t: STRING;\n\t\n\t//maximum limit for expected IO-modules.\n\tlimitDigitalInputs\t: INT\t:= 3;\n\tlimitDigitalOutputs\t: INT\t:= 3;\n\tlimitAnalogInputs\t: INT\t:= 3;\n\tlimitPowerSupplies\t: INT\t:= 2;\n\t\n\t//start bit for sorting IO modules only upon first scan of program. Ommit this code when application is running.\n\tfirstScan\t:\tBOOL := TRUE;\nEND_VAR\n\n","LineInfoPersistence":"(string)df64f14a-44b4-4d11-a89a-b220a60c0bcb_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)464","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}